{"version":3,"sources":["notFound.jpg","UserCard.js","NotAUser.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardExampleCard","avatar","name","location","userName","bio","repos","className","Card","Image","src","wrapped","ui","Content","Header","Meta","i","class","extra","Description","NotAUser","notFound","App","useState","setName","setUserName","setAvatar","setLocation","setBio","userInput","setUserInput","setRepos","setNotFound","useEffect","fetch","then","resp","json","data","console","log","setData","login","avatar_url","public_repos","Form","onSubmit","userData","message","Field","onChange","e","target","value","placeholder","Button","color","type","UserCard","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b872bebe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/notFound.a43ee6d3.jpg\";","import React from \"react\";\nimport { Card, Image } from \"semantic-ui-react\";\n\nconst CardExampleCard = ({ avatar, name, location, userName, bio, repos }) => (\n  <div className=\"card\">\n    <Card>\n      <Image src={avatar} wrapped ui={false} />\n      <Card.Content>\n        <Card.Header>{name}</Card.Header>\n        <Card.Header>{bio}</Card.Header>\n        <Card.Meta>\n          <span className=\"date\" i class=\"fa fa-map-marker\">\n            {location}\n          </span>\n        </Card.Meta>\n      </Card.Content>\n      <Card.Content extra>\n        <Card.Description>Username - {userName}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <Card.Description>Public repos - {repos}</Card.Description>\n      </Card.Content>\n    </Card>\n  </div>\n);\n\nexport default CardExampleCard;\n","import React from 'react'\nimport notFound from './notFound.jpg'\n\nfunction NotAUser() {\n    return (\n      <div className=\"notfound\">\n        <img src={notFound}></img>\n      </div>\n    );\n}\n\nexport default NotAUser\n","import React, { useState, useEffect} from 'react';\nimport './App.css';\nimport { Button, Form } from \"semantic-ui-react\";\nimport UserCard from './UserCard';\nimport NotAUser from './NotAUser'\n\nfunction App() {\n\n  const [name, setName] = useState('')\n  const [userName, setUserName] = useState('')\n  const [avatar, setAvatar] = useState('')\n  const [location, setLocation] = useState('')\n  const [bio, setBio] = useState('')\n  const [userInput, setUserInput] = useState('')\n  const [repos, setRepos] = useState('')\n  const [notFound, setNotFound] = useState(null)\n\n  // on the page load show my github card - runs once\n  useEffect(() => {\n    fetch('https://api.github.com/users/alenaniku')\n    .then(resp => resp.json())\n    .then(data => {\n      console.log(data)\n      setData(data)\n    })\n  }, [])\n\n  const setData = ({ name, login, avatar_url, location, bio, public_repos }) => {\n    setName(name)\n    setUserName(login)\n    setAvatar(avatar_url)\n    setLocation(location)\n    setBio(bio)\n    setRepos(public_repos)\n  };\n\n  // change the state on search\n  const handleSearchUser = (e) => {\n    setUserInput([e.target.value])\n  }\n\n  // fetch the user on submit, if the user is not found - display message\n  const handleSubmitUser = () => {\n    fetch(`https://api.github.com/users/${userInput}`)\n    .then(resp => resp.json())\n    .then(userData => {\n      if (userData.message) {\n        setNotFound(userData.message)\n      } else {\n        setData(userData)\n      }\n    })\n  }\n\n  return (\n    <>\n      <div className=\"navbar\">Github User Search</div>\n\n      <div className=\"search\">\n        <Form onSubmit={handleSubmitUser}>\n          <Form.Field onChange={handleSearchUser}>\n            <label>Enter User Name</label>\n            <input placeholder=\"User Name\" />\n          </Form.Field>\n\n          <Button color=\"purple\" type=\"submit\">\n            Search\n          </Button>\n        </Form>\n      </div>\n\n      {notFound ? (\n        <NotAUser />\n      ) : (\n        <UserCard\n          avatar={avatar}\n          name={name}\n          location={location}\n          userName={userName}\n          bio={bio}\n          repos={repos}\n        />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}